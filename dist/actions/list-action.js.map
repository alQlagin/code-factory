{"version":3,"sources":["../../src/actions/list-action.js"],"names":[],"mappings":"AAAA;;;AAGA;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;IAEsB,U;;;AAClB,wBAAY,YAAZ,EAA0B;AAAA;;AAAA,kGAChB,YADgB;;AAEtB,cAAK,QAAL,GAAgB;AACZ,qBAAS,EADG;AAEZ,yBAAa;AAFD,SAAhB;AAFsB;AAMzB;;;;4BAEG,S,EAAW;AACX,mBAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,SAAhB,CAAP;AACH;;;iCAEQ,S,EAA0C;AAAA;;AAAA,gBAA/B,WAA+B,yDAAjB,CAAiB;AAAA,gBAAd,OAAc,yDAAJ,EAAI;;AAC/C,0BAAc,OAAO,WAAP,CAAd;AACA,sBAAU,OAAO,OAAP,CAAV;;AAEA,gBAAI,UAAU,CAAd,EACI,UAAU,KAAK,QAAL,CAAc,OAAxB;;AAEJ,gBAAI,cAAc,CAAlB,EACI,cAAc,KAAK,QAAL,CAAc,WAA5B;;AAEJ,gBAAI,OAAO,CAAC,OAAO,WAAP,IAAsB,CAAvB,IAA4B,OAAO,OAAP,CAAvC;;AAEA,gBAAI,mBAAJ;AAAA,gBAAgB,aAAhB;AACA,mBAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,SAAjB,EACF,IADE,CACG;AAAA,uBAAS,aAAa,KAAtB;AAAA,aADH,EAEF,IAFE,CAEG,YAAM;AACR,uBAAO,OAAK,GAAL,CAAS,SAAT,EACF,IADE,CACG,IADH,EAEF,KAFE,CAEI,OAFJ,CAAP;AAGH,aANE,EAOF,IAPE,CAOG;AAAA,uBAAQ,OAAO,IAAf;AAAA,aAPH,EAQF,IARE,CAQG,YAAM;AACR,uBAAO;AACH,8BADG;AAEH,gCAAY,yBAAe,WAAf,EAA4B,OAA5B,EAAqC,UAArC;AAFT,iBAAP;AAIH,aAbE,CAAP;AAcH;;;;;;kBAxCiB,U","file":"list-action.js","sourcesContent":["/**\n * Created by alex on 29.07.16.\n */\n'use strict';\nimport BaseAction from './base-action';\nimport Pagination from '../utils/pagination';\n\nexport  default class ListAction extends BaseAction {\n    constructor(MogooseModel) {\n        super(MogooseModel);\n        this.defaults = {\n            perPage: 10,\n            currentPage: 1\n        }\n    }\n\n    run(condition) {\n        return this.Model.find(condition);\n    }\n\n    paginate(condition, currentPage = 1, perPage = 10) {\n        currentPage = Number(currentPage);\n        perPage = Number(perPage);\n\n        if (perPage < 1)\n            perPage = this.defaults.perPage;\n\n        if (currentPage < 1)\n            currentPage = this.defaults.currentPage;\n\n        let skip = (Number(currentPage) - 1) * Number(perPage);\n\n        let totalCount, data;\n        return this.Model.count(condition)\n            .then(count => totalCount = count)\n            .then(() => {\n                return this.run(condition)\n                    .skip(skip)\n                    .limit(perPage)\n            })\n            .then(list => data = list)\n            .then(() => {\n                return {\n                    data,\n                    pagination: new Pagination(currentPage, perPage, totalCount)\n                }\n            })\n    }\n\n\n\n}\n"]}